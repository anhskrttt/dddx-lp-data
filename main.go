package main

import (
	"dddx-lp-data/abigen/pair"
	"dddx-lp-data/abigen/token"
	"dddx-lp-data/models"
	"encoding/json"
	"fmt"
	"log"
	"math"
	"math/big"
	"net/http"
	"strconv"

	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/ethclient"
	"github.com/gin-gonic/gin"
	"github.com/joho/godotenv"
)

func init() {
	err := godotenv.Load()
	if err != nil {
		log.Fatal("Error loading .env file")
	}
}

func main() {

	// Step 01: Initialize BSC Client
	client, err := ethclient.Dial("https://bsc-dataseed4.ninicoin.io")
	if err != nil {
		log.Fatal(err)
	}

	fmt.Println("We have a connection")

	_ = client

	// Step 02: Initialize gin router
	r := gin.Default()
	r.GET("/api/:usrAddr", func(c *gin.Context) {
		// Declare a model to response
		var user models.UserInformation
		user.Protocol = "DDDX" // Default
		user.Tag = "Liquidity Provide"

		// Get data off body req
		walletAddr := common.HexToAddress(c.Param("usrAddr"))
		user.Address = walletAddr.Hex()

		/**********************************************************************/
		/* Reading contract */
		pairAddress := common.HexToAddress("0x322Ba943c19f9ec1EF8ceAD8260b30E789Ca1846") // WBNB/BUSD
		instance, err := pair.NewPair(pairAddress, client)
		if err != nil {
			log.Fatal(err)
		}

		user.PairName, err = instance.Name(&bind.CallOpts{})
		if err != nil {
			log.Fatal(err)
		}

		user.PairSymbol, err = instance.Symbol(&bind.CallOpts{})
		if err != nil {
			log.Fatal(err)
		}

		// Get wallet's LP token balance
		bal, err := instance.BalanceOf(&bind.CallOpts{}, walletAddr)
		if err != nil {
			log.Fatal(err)
		}

		// Get total supply of LP tokens
		totalSupply, err := instance.TotalSupply(&bind.CallOpts{})
		if err != nil {
			log.Fatal(err)
		}

		// Get the wallet's LP ratio
		lpRatio := new(big.Float).Quo(new(big.Float).SetInt(bal), new(big.Float).SetInt(totalSupply))

		// Get pool's token0 balance
		// Ex: WBNB

		// Get token0's address
		token0Addr, err := instance.Token0(&bind.CallOpts{})
		if err != nil {
			log.Fatal(err)
		}

		// Get pool's balance
		token0Instance, err := token.NewToken(common.HexToAddress(token0Addr.Hex()), client)
		if err != nil {
			log.Fatal(err)
		}

		token0Bal, err := token0Instance.BalanceOf(&bind.CallOpts{}, pairAddress)
		if err != nil {
			log.Fatal(err)
		}

		token0BalRatio := new(big.Float).Mul(new(big.Float).SetInt(token0Bal), lpRatio)
		result0 := new(big.Int)
		token0BalRatio.Int(result0)

		user.Token0Bal = int(result0.Int64())

		// Get pool's token1 balance
		// Ex: WBNB
		// Get token0's address
		token1Addr, err := instance.Token1(&bind.CallOpts{})
		if err != nil {
			log.Fatal(err)
		}

		// Get pool's balance
		token1Instance, err := token.NewToken(common.HexToAddress(token1Addr.Hex()), client)
		if err != nil {
			log.Fatal(err)
		}

		token1Bal, err := token1Instance.BalanceOf(&bind.CallOpts{}, pairAddress)
		if err != nil {
			log.Fatal(err)
		}

		_ = token1Bal

		token1BalRatio := new(big.Float).Mul(new(big.Float).SetInt(token1Bal), lpRatio)
		result1 := new(big.Int)
		token1BalRatio.Int(result1)

		user.Token1Bal = int(result1.Int64())

		// user.Token1Bal = new(big.Float).Mul(new(big.Float).SetInt(token1Bal), lpRatio)

		/* End of reading contract*/
		/**********************************************************************/

		/**********************************************************************/
		/* Query data from coingecko */

		// WBNB to USD
		resp, err := http.Get("https://api.coingecko.com/api/v3/simple/price?ids=wbnb&vs_currencies=usd")
		if err != nil {
			log.Fatalln(err)
		}

		// //We Read the response body on the line below.
		// body, err := ioutil.ReadAll(resp.Body)
		// if err != nil {
		// 	log.Fatalln(err)
		// }
		// //Convert the body to type string
		// sb := string(body)
		// fmt.Println(sb)

		var wbnbStruct models.WbnbAutoGenerated

		errDecode := json.NewDecoder(resp.Body).Decode(&wbnbStruct)
		if errDecode != nil {
			log.Fatalln(err)
		}

		fmt.Println(wbnbStruct)

		wbnbToUsd := wbnbStruct.Wbnb.Usd

		user.Token0BalInUsd = WeiToEth(user.Token0Bal) * wbnbToUsd

		// BUSD to USD
		resp1, err := http.Get("https://api.coingecko.com/api/v3/simple/price?ids=busd&vs_currencies=usd")
		if err != nil {
			log.Fatalln(err)
		}

		var busdbStruct models.BUSDAutoGenerated

		errDecode1 := json.NewDecoder(resp1.Body).Decode(&busdbStruct)
		if errDecode1 != nil {
			log.Fatalln(err)
		}

		fmt.Println(wbnbStruct)

		busdToUsd := busdbStruct.Busd.Usd
		user.Token1BalInUsd = WeiToEth(user.Token1Bal) * busdToUsd

		/* End of querying data from coingecko*/
		/**********************************************************************/

		// c.JSON(http.StatusOK, gin.H{
		// 	"message":        "successful",
		// 	"userAddress":    walletAddr,
		// 	"protocol":       "DDDX",
		// 	"tag":            "LP",
		// 	"pairName":       name,
		// 	"pairSymbol":     symbol,
		// 	"token0Bal":      fmt.Sprintf("%.18f", WeiToEth(token0BalOfUser)),
		// 	"token1Bal":      fmt.Sprintf("%.18f", WeiToEth(token1BalOfUser)),
		// 	"token0BalInUSD": fmt.Sprintf("%.18f", new(big.Float).Mul(WeiToEth(token0BalOfUser), new(big.Float).SetFloat64(wbnbToUsd))),
		// 	"token1BalInUSD": fmt.Sprintf("%.18f", new(big.Float).Mul(WeiToEth(token1BalOfUser), new(big.Float).SetFloat64(busdToUsd))),
		// 	"totalBalance":   fmt.Sprintf("%.18f", new(big.Float).Add(new(big.Float).Mul(WeiToEth(token1BalOfUser), new(big.Float).SetFloat64(busdToUsd)), new(big.Float).Mul(WeiToEth(token0BalOfUser), new(big.Float).SetFloat64(wbnbToUsd)))),
		// })

		c.JSON(http.StatusOK, gin.H{
			"message": "successful",
			"user":    user,
		})
	})
	r.Run()
}

func WeiToEth(balance int) float64 {
	fbalance := new(big.Float)
	fbalance.SetString(strconv.Itoa(balance))
	bnbValue := new(big.Float).Quo(fbalance, big.NewFloat(math.Pow10(18)))

	// WARNING: Should check accuracy?
	result, _ := bnbValue.Float64()

	return result
}
